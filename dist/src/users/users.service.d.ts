import { Prisma } from '@prisma/client';
import { CreateUserDto, UserSignUpDto } from 'src/auth/dto/auth.dto';
import { CrudService } from 'src/common/database/crud.service';
import { UsersMapType } from './users.mapType';
import { PrismaService } from 'src/prisma/prisma.service';
export interface IGetUserBy<T = keyof Prisma.UserWhereInput, R = string> {
    field: T;
    value: R;
}
export declare class UsersService extends CrudService<Prisma.UserDelegate, UsersMapType> {
    private readonly prisma;
    constructor(prisma: PrismaService);
    getBy(dto: IGetUserBy): Promise<{
        id: string;
        email: string;
        username: string | null;
        password: string;
        mobile: string | null;
        first_name: string | null;
        last_name: string | null;
        imageUrl: string | null;
        gender: string | null;
        country: string | null;
        access_token: string | null;
        refresh_token: string | null;
        verifiedToken: string | null;
        provider: string | null;
        providerId: string | null;
        lastLogin: Date | null;
        emailVerified: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    createUser(dto: CreateUserDto): Promise<{
        id: string;
        email: string;
        username: string;
    }>;
    registerUser(dto: UserSignUpDto, password: string): Promise<any>;
    findUserByEmail(identity: string): Promise<{
        id: string;
        email: string;
        username: string | null;
        password: string;
        mobile: string | null;
        first_name: string | null;
        last_name: string | null;
        imageUrl: string | null;
        gender: string | null;
        country: string | null;
        access_token: string | null;
        refresh_token: string | null;
        verifiedToken: string | null;
        provider: string | null;
        providerId: string | null;
        lastLogin: Date | null;
        emailVerified: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findUserByUsername(identity: string): Promise<{
        id: string;
        email: string;
        username: string | null;
        password: string;
        mobile: string | null;
        first_name: string | null;
        last_name: string | null;
        imageUrl: string | null;
        gender: string | null;
        country: string | null;
        access_token: string | null;
        refresh_token: string | null;
        verifiedToken: string | null;
        provider: string | null;
        providerId: string | null;
        lastLogin: Date | null;
        emailVerified: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
    findById(id: string): Promise<{
        id: string;
        email: string;
        username: string | null;
        password: string;
        mobile: string | null;
        first_name: string | null;
        last_name: string | null;
        imageUrl: string | null;
        gender: string | null;
        country: string | null;
        access_token: string | null;
        refresh_token: string | null;
        verifiedToken: string | null;
        provider: string | null;
        providerId: string | null;
        lastLogin: Date | null;
        emailVerified: boolean;
        createdAt: Date;
        updatedAt: Date;
    }>;
}
